Nao = cppApplication + {

  // overwrite platform and c++-compiler for cross compiling
  platform = "Linux"

  if (host == "Win32") { // Even on a 64 Windows host will be Win32
    cppCompiler = "env CCACHE_CPP2=yes ccache clang++ -D__extern_always_inline=inline"
    linker = "$(utilDirRoot)/Buildchain/Windows/bin/ld.exe"
  } else {
    linker = "ld"
  }
  command = "$(linker) -o $(output) --eh-frame-hdr -m elf_x86_64 -dynamic-linker=/home/nao/sysroot/lib/ld-linux.so.2 -rpath=/home/nao/sysroot/lib $(utilDirRoot)/Buildchain/V6/gcc/lib/crt1.o $(utilDirRoot)/Buildchain/V6/gcc/lib/crti.o $(utilDirRoot)/Buildchain/V6/gcc/lib/crtbegin.o $(patsubst %,-L%,$(libPaths)) @$(writefile $(buildDir)/objects,$(input)) $(linkFlags) $(LDFLAGS) $(patsubst %,-l%,$(libs)) $(utilDirRoot)/Buildchain/V6/gcc/lib/libstdc++.so.6.0.24 --start-group $(utilDirRoot)/Buildchain/V6/gcc/lib/libm-2.29.so --as-needed $(utilDirRoot)/Buildchain/V6/gcc/lib/libmvec_nonshared.a $(utilDirRoot)/Buildchain/V6/gcc/lib/libmvec-2.29.so --no-as-needed --end-group --start-group $(utilDirRoot)/Buildchain/V6/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/V6/gcc/lib/libgcc.a --end-group --start-group $(utilDirRoot)/Buildchain/V6/gcc/lib/libc-2.29.so $(utilDirRoot)/Buildchain/V6/gcc/lib/libc_nonshared.a --as-needed $(utilDirRoot)/Buildchain/V6/gcc/lib/ld-2.29.so --no-as-needed --end-group --start-group $(utilDirRoot)/Buildchain/V6/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/V6/gcc/lib/libgcc.a --end-group $(utilDirRoot)/Buildchain/V6/gcc/lib/crtend.o $(utilDirRoot)/Buildchain/V6/gcc/lib/crtn.o"

  root = "$(srcDirRoot)"

  files = {
    "$(srcDirRoot)/Modules/**.cpp" = cppSource
    "$(srcDirRoot)/Modules/**.h"
    "$(srcDirRoot)/Platform/Nao/*.cpp" = cppSource
    "$(srcDirRoot)/Platform/Nao/*.h"
    "$(srcDirRoot)/Platform/*.cpp" = cppSource
    "$(srcDirRoot)/Platform/*.h"
    "$(srcDirRoot)/Representations/**.cpp" = cppSource
    "$(srcDirRoot)/Representations/**.h"
    "$(srcDirRoot)/Threads/**.cpp" = bhCppSource
    "$(srcDirRoot)/Threads/**.h"
    "$(srcDirRoot)/Tools/**.cpp" = cppSource
    "$(srcDirRoot)/Tools/**.h"
    "$(utilDirRoot)/asmjit/src/**.cpp" = cppSource
  }

  defines += {
    "TARGET_ROBOT", "__STRICT_ANSI__"
    "ASMJIT_STATIC"
    "ASMJIT_BUILD_X86"
    "ASMJIT_NO_BUILDER"
    "ASMJIT_NO_COMPILER"
    "ASMJIT_NO_LOGGING"
    "ASMJIT_NO_TEXT"
    "ASMJIT_NO_INST_API"
    if (configuration == "Develop") { -"NDEBUG" }
  }

  output = "$(buildDir)/bhuman"

  includePaths = {
    "$(srcDirRoot)"
    "$(srcDirRoot)/Tools/Precompiled"
    "$(utilDirRoot)/SimRobot/Util/Eigen"
    "$(utilDirRoot)/GameController/include"
    "$(utilDirRoot)/fftw-3.3"
    "$(utilDirRoot)/hdf5/include"
    "$(utilDirRoot)/libjpeg/include"
    "$(utilDirRoot)/snappy/include"
    "$(utilDirRoot)/flite/include"
    "$(utilDirRoot)/asmjit/src"
  }

  systemIncludePaths = {
    "$(utilDirRoot)/Buildchain/V6/gcc/include/c++/7.4.0"
    "$(utilDirRoot)/Buildchain/V6/gcc/include/c++/7.4.0/x86_64-nao-linux-gnu"
    "$(utilDirRoot)/Buildchain/V6/gcc/include"
    "$(clanginclude)"
  }

  libPaths = {
    "$(utilDirRoot)/fftw-3.3/V6"
    "$(utilDirRoot)/hdf5/lib/V6"
    "$(utilDirRoot)/libjpeg/lib/V6"
    "$(utilDirRoot)/snappy/lib/V6"
    "$(utilDirRoot)/flite/lib/V6"
    "$(utilDirRoot)/Buildchain/V6/gcc/lib"
  }

  libs = {
    "rt-2.29", "jpeg", "pthread-2.29", "fftw3", "fftw3f", "hdf5", "snappy"
    "flite_cmu_us_slt", "flite_usenglish", "flite_cmulex", "flite", "asound", "dl-2.29"
  }

  cppFlags += {
    "$(patsubst %,-isystem%,$(systemIncludePaths))"
    "-Wconversion"
    "-Wno-sign-conversion"
    "-nostdinc -nostdinc++ -march=silvermont -mtune=silvermont -target x86_64-nao-linux-gnu"
    "-mrdrnd" // As soon as everyone uses at least clang 7.0 this can be removed since it will be default for the silvermont architecture then.
    if (host == "Win32") { "-x c++" }
    if (tool != "vcxproj") {
      "-Wno-switch" // deactivating this is a problem because of the ENUM macro, since numOf<ENUM>s is never used in switch.
      if (configuration == "Release") {
        "-Wno-unused" // resolving debugging macros to nothing would create many of these warnings
      }
    }
  }

  linkFlags += "-nostdlib -z nodefaultlib"

  if (tool == "vcxproj") {
    buildCommand = "bashexec \"echo \\\"`uname -o` --ignore-dependencies $(target) config=$(configuration) clanginclude=\\\\\\\"`for d in %24(clang++ -c -v -E - </dev/null 2>&1 | sed -n -e '/here:/,/^End/{/here:/d; /^End/d; p}'); do [ -f $$d/xmmintrin.h ] && echo $$d; done | head -n1`\\\\\\\"\\\" | sed 's@^Cygwin@$(winMarePath)@; s@^GNU/Linux@$(linuxMarePath)@' | bash\""
    reBuildCommand = "bashexec \"echo \\\"`uname -o` --ignore-dependencies rebuild $(target) config=$(configuration) clanginclude=\\\\\\\"`for d in %24(clang++ -c -v -E - </dev/null 2>&1 | sed -n -e '/here:/,/^End/{/here:/d; /^End/d; p}'); do [ -f $$d/xmmintrin.h ] && echo $$d; done | head -n1`\\\\\\\"\\\" | sed 's@^Cygwin@$(winMarePath)@; s@^GNU/Linux@$(linuxMarePath)@' | bash\""
    cleanCommand = "$(winMarePath) --ignore-dependencies clean $(target) config=$(configuration)"
  }
}
