#!/bin/bash
# This script builds the code from the command line using xcodebuild.
# It is executed by the bush and deploy. It filters out a lot of the
# output of xcodebuild, which would otherwise slow down the bush
# significantly.

cd "$(dirname "$(which "$0")")"

./generate >/dev/null

( xcodebuild -jobs `sysctl -n hw.ncpu` -parallelizeTargets -target $1 -configuration $2 \
  | grep --line-buffered "^[^ -]" \
  | grep --line-buffered -v \
    -e "Build settings from command line:" \
    -e "User defaults from command line:" \
    -e "^Build Preparation" \
    -e "^Build task concurrency" \
    -e "^=== BUILD TARGET" \
    -e "^Check dependencies" \
    -e "^Write auxiliary files" \
    -e "write-file" \
    -e "PhaseScriptExecution" \
    -e "^/bin/mkdir" \
    -e "^chmod" \
    -e "^Create product structure" \
    -e "^Signing Identity" \
    -e "^CodeSign" \
    -e "^.*/strip -S" \
    -e "^Touch" \
    -e "^RegisterWithLaunchServices" \
  | sed -l \
    -e "s%^CompileC [^ ]* \(.*/\)*\([^ ]*\).*%Compiling \2 ...%" \
    -e "s%^Ld \(.*/\)*\([^ ]*\).*%Linking \2 ...%" \
    -e "s%^ProcessPCH.*/\([^ ]*\).*%Precompiling \1 ...%" \
    -e "s%^Libtool.*/\([^ ]*\).*%Creating \1 ...%" \
    -e "s%^RuleScriptExecution.*/\([^ ]*\).*%Running script for \1 ...%" \
    -e "s%^ProcessInfoPlistFile.*/\([^ ]*\)%Processing \1 ...%" \
    -e "s%^CpResource.*/\([^ ]*\)%Copying \1 ...%" \
    -e "s%^PBXCp.*/\([^ ]*\)%Copying \1 ...%"
  test ${PIPESTATUS[0]} -eq 0
) 2> >( grep "BUILD FAILED" >&2 )
RESULT=$?
sleep 1
exit $RESULT
