RobotStatus
{
  isPenalized: Boolean
  isUpright: Boolean
  hasGroundContact: Boolean
  timeWhenLastUpright: Timestamp(bits=8, shift=6, reference=relativePast)
  timeOfLastGroundContact: Timestamp(bits=8, shift=6, reference=relativePast)
}

RobotPose
{
  rotation: Angle(bits=8) // Is also present in the SPLStandardMessage.
  translation: Vector<Float(min=-32768, max=32767, bits=16)>(n=2) // Is also present in the SPLStandardMessage.
  quality: Enum(type=RobotPose::LocalizationQuality)
  covariance: Matrix<Float>(m=3, n=3, symmetric)
}

BallState
{
  position: Vector<Float(min=-32768, max=32767, bits=16)>(n=2) // Is also present in the SPLStandardMessage.
  velocity: Vector<Float(min=-32768, max=32767, bits=16)>(n=2)
  covariance: Matrix<Float>(m=2, n=2, symmetric)
}

BallModel
{
  lastPerception: Vector<Float(min=-32768, max=32767, bits=16)>(n=2)
  estimate: BallState
  timeWhenLastSeen: Timestamp
  timeWhenDisappeared: Timestamp
  seenPercentage: Integer(min=0, max=100)
}

Whistle
{
  confidenceOfLastWhistleDetection: Float(min=0, max=2.55, bits=8)
  channelsUsedForWhistleDetection: Integer(min=0, max=4)
  lastTimeWhistleDetected: Timestamp(bits=16, reference=relativePast, noclip)
}

BehaviorStatus
{
  activity: Enum(type=BehaviorStatus::Activity, uncompressed)
  speed: Float(min=-500.0, max=500.0, bits=16)
}

TeammateRoles
{
  roles: Integer(min=-1, max=14)[:5]
  captain: Integer(min=-1, max=14)
  timestamp: Timestamp(bits=13, reference=relativePast)
}

PlayerRole
{
  role: Enum(type=PlayerRole::RoleType)
}

TeamBehaviorStatus
{
  teamActivity: Enum(type=TeamBehaviorStatus::TeamActivity)
  teammateRoles: TeammateRoles
  role: PlayerRole
}

FrameInfo
{
  time: Timestamp(bits=8, reference=relativePast)
}

TeamMessage
{
  theRobotStatus: RobotStatus
  theRobotPose: RobotPose
  theFrameInfo: FrameInfo
  theBallModel: BallModel
  theBehaviorStatus: BehaviorStatus
}
