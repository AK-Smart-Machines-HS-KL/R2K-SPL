maxTryCounter = 4;
motionSpecificRetries = 2;
motionSpecificRetriesFront = 2;
shoulderPitchThreshold = 50deg;
motorMalfunctionBreakUp = true;
maxStiffnessDebugMode = 40;
mofs = {
  decideAutomatic = {
    baseLimbStiffness = [0, 0, 0, 0, 0];
    lines = [];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  front = {
    baseLimbStiffness = [20, 40, 40, 100, 100];
    lines = [
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-0, -30];
        leftArm = [68.5, 71.9, -121.9, -4.6, -90, 0];
        rightArm = [84.6, -72.9, 120.4, 6.4, 90, 0];
        leftLeg = [0, 0, -21.3, 48.9, -27.6, 0];
        rightLeg = [0, 0, -21.2, 49, -27.6, 0];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, -30];
        leftArm = [-13.9, 68.2, -122.2, -11.1, -90, 0];
        rightArm = [-13.5, -67.9, 121.9, 8, 90, 0];
        leftLeg = [-3.9, -0.2, -84.6, 123.7, -52.9, 2.3];
        rightLeg = [-3.9, -0.7, -80.2, 122, -47.9, 2.2];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, -30];
        leftArm = [-13.9, 68.2, -122.2, -65, -90, 0];
        rightArm = [-13.5, -67.9, 121.9, 65, 90, 0];
        leftLeg = [0.3, -1.6, -57.6, 41.7, -68, 4.5];
        rightLeg = [0.3, -0.6, -57.2, 42.7, -68, 0.3];
      },
      {
        phase = ArmPushing;
        duration = 250;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, -30];
        leftArm = [-39.64, -3.87, -90.62, -88.07, -87.54, 0];
        rightArm = [-39.39, 16.61, 103.36, 80.51, 84.37, 0];
        leftLeg = [-28.4, -17.52, -92.59, -7.31, -10.54, -20.8];
        rightLeg = [-28.4, 17.52, -92.59, -7.31, -10.54, 20.8];
      },
      {
        phase = ArmPushing;
        duration = 250;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = true;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 10;
                jointPairs = [
                  {joint = lHipPitch; addValue = 1;},
                  {joint = rHipPitch; addValue = 1;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 70;
            isNot = false;
            maxWaitTime = 410;
          }
        ];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lShoulderPitch; s = 100;},
          {joint = lShoulderRoll; s = 100;},
          {joint = lElbowYaw; s = 100;},
          {joint = lElbowRoll; s = 100;},
          {joint = rShoulderPitch; s = 100;},
          {joint = rShoulderRoll; s = 100;},
          {joint = rElbowYaw; s = 100;},
          {joint = rElbowRoll; s = 100;}
        ];
        head = [-0, -30];
        leftArm = [0, 0.7, -123.67, -0.96, -89.12, 0];
        rightArm = [0, 5.36, 117.33, 1.5, 87.19, 0];
        leftLeg = [-54.24, -19.8, -87.05, 97.72, -23.53, 5];
        rightLeg = [-54.24, 19.37, -90.83, 82.78, 8, 6.92];
      },
      {
        phase = ArmPushing;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = WaitTime; lowerFloat = 380; higherFloat = 3000; isNot = false;},
          {variable = FrontHack; lowerFloat = 1; higherFloat = 1; isNot = false;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-0, -30];
        leftArm = [0, 0.7, -123.67, -0.96, -89.12, 0];
        rightArm = [0, 5.36, 117.33, 1.5, 87.19, 0];
        leftLeg = [-28.4, -17.52, -92.59, -7.31, -10.54, -20.8];
        rightLeg = [-28.4, 17.52, -92.59, -7.31, -10.54, 20.8];
      },
      {
        phase = ArmPushing;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-0, -30];
        leftArm = [0, 0.7, -123.67, -0.96, -89.12, 0];
        rightArm = [0, 5.36, 117.33, 1.5, 87.19, 0];
        leftLeg = [-28.4, -17.52, -92.59, -7.31, 40.54, -20.8];
        rightLeg = [-28.4, 17.52, -92.59, -7.31, 40.54, 20.8];
      },
      {
        phase = ArmPushing;
        duration = 250;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = true;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 10;
                jointPairs = [
                  {joint = lHipPitch; addValue = 1;},
                  {joint = rHipPitch; addValue = 1;}
                ];
                predictJointDif = false;
              },
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = -20;
                maxVal = 0;
                jointPairs = [
                  {joint = lAnklePitch; addValue = 0.5;},
                  {joint = rAnklePitch; addValue = 0.5;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 70;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-0, -30];
        leftArm = [0, 0.7, -123.67, -0.96, -89.12, 0];
        rightArm = [0, 5.36, 117.33, 1.5, 87.19, 0];
        leftLeg = [-54.24, -19.8, -87.05, 97.72, -10.53, 25];
        rightLeg = [-54.24, 19.37, -90.83, 82.78, 15, -35];
      },
      {
        phase = PushingWithArmsFromGround;
        duration = 250;
        goalCom = {x = 50; y = 0;};
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 10;
                jointPairs = [
                  {joint = lHipPitch; addValue = 1;},
                  {joint = rHipPitch; addValue = 1;},
                  {joint = lKneePitch; addValue = 1;},
                  {joint = rKneePitch; addValue = 1;}
                ];
                predictJointDif = false;
              },
              {
                jointDelta = lHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 10;
                jointPairs = [
                  {joint = lAnklePitch; addValue = 0.5;}
                ];
                predictJointDif = true;
              },
              {
                jointDelta = rHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 10;
                jointPairs = [
                  {joint = rAnklePitch; addValue = 0.5;}
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 45;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [
          {joint = lShoulderPitch; s = 20;},
          {joint = lShoulderRoll; s = 20;},
          {joint = lElbowYaw; s = 20;},
          {joint = lElbowRoll; s = 20;},
          {joint = lWristYaw; s = 20;},
          {joint = lHand; s = 20;},
          {joint = rShoulderPitch; s = 20;},
          {joint = rShoulderRoll; s = 20;},
          {joint = rElbowYaw; s = 20;},
          {joint = rElbowRoll; s = 20;},
          {joint = rWristYaw; s = 20;},
          {joint = rHand; s = 20;}
        ];
        head = [-0, -30];
        leftArm = [60, 20, 20000, 20000, 20000, 20000];
        rightArm = [60, -20, 20000, 20000, 20000, 20000];
        leftLeg = [-50, 0, -70, 100, -15, -5];
        rightLeg = [-50, 0, -70, 100, -15, 5];
      },
      {
        phase = ReduceVel;
        duration = 300;
        goalCom = {x = 20; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = -15;
                maxVal = -10;
                jointPairs = [
                  {joint = lAnklePitch; addValue = -0.7;},
                  {joint = lAnkleRoll; addValue = -0.35;}
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = 10;
                maxVal = 15;
                jointPairs = [
                  {joint = rAnklePitch; addValue = 0.7;},
                  {joint = rAnkleRoll; addValue = -0.35;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 40;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 1;},
            {joint = rHipPitch; factor = 1;},
            {joint = rAnkleRoll; factor = -0.5;},
            {joint = lAnkleRoll; factor = 0.5;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [-0, -30];
        leftArm = [60, 20, 20000, 20000, 20000, 20000];
        rightArm = [60, -20, 20000, 20000, 20000, 20000];
        leftLeg = [-40, 0, -65, 123, -35, -10];
        rightLeg = [-40, 0, -65, 123, -35, 10];
      },
      {
        phase = ReduceVel;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 20;
                jointPairs = [
                  {joint = lHipPitch; addValue = 1;},
                  {joint = rHipPitch; addValue = 1;}
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = -15;
                maxVal = -10;
                jointPairs = [
                  {joint = lAnklePitch; addValue = -0.7;},
                  {joint = lAnkleRoll; addValue = -0.35;}
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = 10;
                maxVal = 15;
                jointPairs = [
                  {joint = rAnklePitch; addValue = 0.7;},
                  {joint = rAnkleRoll; addValue = -0.35;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 40;
            isNot = true;
          }
        ];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 1;},
            {joint = rHipPitch; factor = 1;},
            {joint = rAnkleRoll; factor = -0.5;},
            {joint = lAnkleRoll; factor = 0.5;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [-0, -30];
        leftArm = [60, 20, 20000, 20000, 20000, 20000];
        rightArm = [60, -20, 20000, 20000, 20000, 20000];
        leftLeg = [-40, 0, -65, 123, -40, -10];
        rightLeg = [-40, 0, -65, 123, -40, 10];
      },
      {
        phase = ReduceVel;
        duration = 25;
        goalCom = {x = 20; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = 10;
            higherFloat = 2000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 0;
            isNot = false;
          }
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [-0, -30];
        leftArm = [60, 20, 20000, 20000, 20000, 20000];
        rightArm = [60, -20, 20000, 20000, 20000, 20000];
        leftLeg = [-40, 0, -80, 123, -50, -10];
        rightLeg = [-40, 0, -80, 123, -50, 10];
      },
      {
        phase = ReduceVel;
        duration = 500;
        goalCom = {x = 10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = true;
        interpolationType = SinusZeroToMax;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 25;
                jointPairs = [
                  {joint = lHipPitch; addValue = 0.35;},
                  {joint = rHipPitch; addValue = 0.35;},
                  {joint = lAnklePitch; addValue = 0.45;},
                  {joint = rAnklePitch; addValue = 0.45;}
                ];
                predictJointDif = true;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = -20;
                maxVal = -10;
                jointPairs = [
                  {joint = lAnklePitch; addValue = -0.8;},
                  {joint = lAnkleRoll; addValue = -0.35;}
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = 10;
                maxVal = 20;
                jointPairs = [
                  {joint = rAnklePitch; addValue = 0.8;},
                  {joint = rAnkleRoll; addValue = -0.35;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.5;
          }
        ];
        waitConditions = [
          {
            variable = FluctuationY;
            lowerFloat = 0;
            higherFloat = 16.67;
            isNot = false;
            maxWaitTime = 2000;
          },
          {
            variable = HYPDifference;
            lowerFloat = 0;
            higherFloat = 15;
            isNot = false;
            maxWaitTime = 1000;
          },
          {
            variable = InertialDataAngleY;
            lowerFloat = -8;
            higherFloat = 8;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 0.5;},
            {joint = rHipPitch; factor = 0.5;}
          ];
          jointX = [
            {joint = lAnkleRoll; factor = 0.4;},
            {joint = rAnkleRoll; factor = 0.4;}
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 7, -80, -2.5, -90, 0];
        rightArm = [90, -7, 80, 2.5, 90, 0];
        leftLeg = [0, 0, -55, 121, -67.8, 0];
        rightLeg = [0, 0, -55, 121, -67.8, 0];
      },
      {
        phase = Stand;
        duration = 500;
        goalCom = {x = 10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 30;
                jointPairs = [
                  {joint = lHipPitch; addValue = 0.6;},
                  {joint = rHipPitch; addValue = 0.6;},
                  {joint = lHipRoll; addValue = 0.167;},
                  {joint = rHipRoll; addValue = -0.167;}
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 0.5;},
            {joint = rHipPitch; factor = 0.5;},
            {joint = lKneePitch; factor = 0.8;},
            {joint = rKneePitch; factor = 0.8;}
          ];
          jointX = [
            {joint = lAnkleRoll; factor = 1;},
            {joint = rAnkleRoll; factor = 1;}
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [20000, 20000, 0, 20000, 20000, 20000];
        rightArm = [20000, 20000, 0, 20000, 20000, 20000];
        leftLeg = [0, 0, -20.8, 48.2, -27.5, 0];
        rightLeg = [0, 0, -20.8, 48.2, -27.5, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 160; y = -20;};
    };
    balanceOut = true;
    continueTo = decideAutomatic;
    clipAngle = -10deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  back = {
    baseLimbStiffness = [20, 60, 60, 90, 90];
    lines = [
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [119.02, 38.41, 2.11, -78.4, -90, 0];
        rightArm = [119.5, -50.19, -7.3, 88.5, 90, 0];
        leftLeg = [-0.69, 3.48, 20.61, 88.48, 7.18, 4.54];
        rightLeg = [-0.69, -0.33, 23.13, 86.84, 4.99, -0.18];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [118.94, 8.08, 2.72, -71.98, -90, 0];
        rightArm = [119.5, -9.06, -5.01, 72.86, 90, 0];
        leftLeg = [-0.6, 3.48, 18.23, 89.45, 7.97, 4.62];
        rightLeg = [-0.6, -0.33, 20.84, 87.46, 5.78, -0.1];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = true;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = BrokenLeftArm; lowerFloat = 0; higherFloat = 0; isNot = false;},
          {variable = BrokenRightArm; lowerFloat = 0; higherFloat = 0; isNot = false;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [65, 50, 2.72, -71.98, 20000, 20000];
        rightArm = [65, -50, -2.72, 71.98, 20000, 20000];
        leftLeg = [20000, 20000, 20000, 20000, 20000, 20000];
        rightLeg = [20000, 20000, 20000, 20000, 20000, 20000];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [118, 50, 20000, 20000, 20000, 20000];
        rightArm = [118, -50, 20000, 20000, 20000, 20000];
        leftLeg = [20000, 20000, 20000, 20000, 20000, 20000];
        rightLeg = [20000, 20000, 20000, 20000, 20000, 20000];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = BrokenLeftArm; lowerFloat = 0; higherFloat = 0; isNot = false;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [65, 50, 2.72, -71.98, 20000, 20000];
        rightArm = [20000, 20000, 20000, 20000, 20000, 20000];
        leftLeg = [20000, 20000, 20000, 20000, 20000, 20000];
        rightLeg = [20000, 20000, 20000, 20000, 20000, 20000];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [1.23, 29.62];
        leftArm = [118, 50, 20000, 20000, 20000, 20000];
        rightArm = [20000, 20000, 20000, 20000, 20000, 20000];
        leftLeg = [20000, 20000, 20000, 20000, 20000, 20000];
        rightLeg = [20000, 20000, 20000, 20000, 20000, 20000];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = BrokenRightArm; lowerFloat = 0; higherFloat = 0; isNot = false;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [20000, 20000, 20000, 20000, 20000, 20000];
        rightArm = [65, -50, -2.72, 71.98, 20000, 20000];
        leftLeg = [20000, 20000, 20000, 20000, 20000, 20000];
        rightLeg = [20000, 20000, 20000, 20000, 20000, 20000];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [20000, 20000, 20000, 20000, 20000, 20000];
        rightArm = [118, -50, 20000, 20000, 20000, 20000];
        leftLeg = [20000, 20000, 20000, 20000, 20000, 20000];
        rightLeg = [20000, 20000, 20000, 20000, 20000, 20000];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = BrokenRightArm; lowerFloat = 0; higherFloat = 0; isNot = false;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [119.5, 12, 5, -85, -30, 0];
        rightArm = [10000, 10000, 10000, 10000, 10000, 10000];
        leftLeg = [0, 20, 15, 25, 50, 0];
        rightLeg = [0, 0, 25, 35, 50, 0];
      },
      {
        phase = ArmPushing;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -70;
            higherFloat = 3000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [120, 12, 5, -85, -30, 0];
        rightArm = [10000, 10000, 10000, 10000, 10000, 10000];
        leftLeg = [0, 15, -65, 57, 57, 0];
        rightLeg = [0, 0, -65, 57, 57, 0];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = BrokenLeftArm; lowerFloat = 0; higherFloat = 0; isNot = false;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [10000, 10000, 10000, 10000, 10000, 10000];
        rightArm = [119.5, -12, -5, 85, 30, 0];
        leftLeg = [0, 0, 25, 35, 50, 0];
        rightLeg = [0, -15, 15, 25, 50, 0];
      },
      {
        phase = ArmPushing;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -70;
            higherFloat = 3000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [10000, 10000, 10000, 10000, 10000, 10000];
        rightArm = [120, -12, -5, 85, 30, 0];
        leftLeg = [0, 0, -65, 57, 57, 0];
        rightLeg = [0, -15, -65, 57, 57, 0];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = true;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = BrokenLeftArm; lowerFloat = 0; higherFloat = 0; isNot = true;},
          {variable = BrokenLeftArm; lowerFloat = 0; higherFloat = 0; isNot = true;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [119.5, 12, 5, -85, -30, 0];
        rightArm = [119.5, -12, -5, 85, 30, 0];
        leftLeg = [0, 0, 25, 35, 50, 0];
        rightLeg = [0, 0, 25, 35, 50, 0];
      },
      {
        phase = ArmPushing;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = true;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -70;
            higherFloat = 3000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [120, 12, 5, -85, -30, 0];
        rightArm = [120, -12, -5, 85, 30, 0];
        leftLeg = [0, 0, -55, 57, 57, 0];
        rightLeg = [0, 0, -55, 57, 57, 0];
      },
      {
        phase = BackSitUp;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [115, 0, 20, -20, -30, 0];
        rightArm = [115, 0, -20, 20, 30, 0];
        leftLeg = [-60, 30, -90, 87, 44, 4];
        rightLeg = [-60, -24, -89, 104, 33, 1];
      },
      {
        phase = Split;
        duration = 250;
        goalCom = {x = -68; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [119.8, 7.8, -71.1, -31.4, -90, 0];
        rightArm = [121.6, -0.4, 87.5, 22.2, 90, 0];
        leftLeg = [-67.9, 18.6, -91, 75.5, 51.6, -4.8];
        rightLeg = [-67.9, -10.7, -91, 73, 52.2, 7.6];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = fromSplit;
    clipAngle = 10deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  fromSplit = {
    baseLimbStiffness = [30, 40, 40, 100, 100];
    lines = [
      {
        phase = HalfSplit;
        duration = 400;
        goalCom = {x = -20; y = 3.5;};
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [115.8, -7.6, -84.6, -15.9, -90, 0];
        rightArm = [120.7, -39.7, 99.4, 8.2, 90, 0];
        leftLeg = [-65.5, 11.6, -35, 123, -30.1, -10];
        rightLeg = [-65.5, -30, -88, 48.7, 52.8, 0];
      },
      {
        phase = HalfSplit;
        duration = 17;
        goalCom = {x = -20; y = 3.5;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [115.8, -7.6, -84.6, -15.9, -90, 0];
        rightArm = [120.7, -39.7, 99.4, 8.2, 90, 0];
        leftLeg = [-65.5, 11.6, -35, 123, -30.1, -10];
        rightLeg = [-65.5, -30, -88, 54.7, 52.8, 0];
      },
      {
        phase = Split;
        duration = 300;
        goalCom = {x = -10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 15;
                jointPairs = [
                  {joint = lHipPitch; addValue = 0.53;},
                  {joint = lAnkleRoll; addValue = 0.53;},
                  {joint = rAnklePitch; addValue = 0.467;},
                  {joint = rAnkleRoll; addValue = -0.53;}
                ];
                predictJointDif = false;
              },
              {
                jointDelta = rKneePitch;
                hipPitchDifferenceCompensation = false;
                minVal = 35;
                maxVal = 36;
                jointPairs = [
                  {joint = rAnklePitch; addValue = 0.5;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = -0.5;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 30, -50, 0, -90, 0];
        rightArm = [90, -30, 50, 0, 90, 0];
        leftLeg = [-40, 6.5, -60, 123, -33, -14];
        rightLeg = [-40, -30, -87, 160, -17, 22];
      },
      {
        phase = Split;
        duration = 100;
        goalCom = {x = -10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 15;
                jointPairs = [
                  {joint = lHipPitch; addValue = 0.53;},
                  {joint = lAnkleRoll; addValue = 0.53;},
                  {joint = rAnklePitch; addValue = 0.467;},
                  {joint = rAnkleRoll; addValue = -0.53;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 30, -50, 0, -90, 0];
        rightArm = [90, -30, 50, 0, 90, 0];
        leftLeg = [-40, 6.5, -60, 123, -33, -10];
        rightLeg = [-40, -15, -87, 123, -17, 10];
      },
      {
        phase = Split;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 15;
                jointPairs = [
                  {joint = lHipRoll; addValue = -0.333;},
                  {joint = lHipPitch; addValue = 0.533;},
                  {joint = lAnklePitch; addValue = 0.4;},
                  {joint = lAnkleRoll; addValue = 0.4;},
                  {joint = rHipRoll; addValue = 0.333;},
                  {joint = rAnklePitch; addValue = 0.67;},
                  {joint = rAnkleRoll; addValue = -0.6;}
                ];
                predictJointDif = true;
              },
              {
                jointDelta = rHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 4;
                maxVal = 8;
                jointPairs = [
                  {joint = rAnklePitch; addValue = 0.52;}
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 1;},
            {joint = rHipPitch; factor = 1;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 30, -50, 0, -90, 0];
        rightArm = [90, -30, 50, 0, 90, 0];
        leftLeg = [-40, 0, -60, 123, -41, 0];
        rightLeg = [-40, 0, -60, 123, -41, 0];
      },
      {
        phase = ReduceVel;
        duration = 300;
        goalCom = {x = 10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 25;
                jointPairs = [
                  {joint = lHipPitch; addValue = 0.67;},
                  {joint = rHipPitch; addValue = 0.67;}
                ];
                predictJointDif = true;
              },
              {
                jointDelta = rHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 5;
                maxVal = 8;
                jointPairs = [
                  {joint = rAnklePitch; addValue = 0.4;}
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 0.5;},
            {joint = rHipPitch; factor = 0.5;}
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 15, -30, -2.5, -90, 0];
        rightArm = [90, -15, 30, 2.5, 90, 0];
        leftLeg = [0, -5, -58, 123, -67.8, 0];
        rightLeg = [0, 5, -58, 123, -67.8, 0];
      },
      {
        phase = Sit;
        duration = 200;
        goalCom = {x = 10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 25;
                jointPairs = [
                  {joint = lHipPitch; addValue = 0.67;},
                  {joint = rHipPitch; addValue = 0.67;}
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [
          {
            variable = FluctuationY;
            lowerFloat = 0;
            higherFloat = 16.67;
            isNot = false;
            maxWaitTime = 1000;
          },
          {
            variable = HYPDifference;
            lowerFloat = 0;
            higherFloat = 15;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 0.5;},
            {joint = rHipPitch; factor = 0.5;},
            {joint = lKneePitch; factor = 0.8;},
            {joint = rKneePitch; factor = 0.8;}
          ];
          jointX = [
            {joint = lAnkleRoll; factor = 1;},
            {joint = rAnkleRoll; factor = 1;}
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 7, -20, -2.5, -90, 0];
        rightArm = [90, -7, 20, 2.5, 90, 0];
        leftLeg = [0, -5, -53, 121, -67.8, 0];
        rightLeg = [0, 5, -53, 121, -67.8, 0];
      },
      {
        phase = Stand;
        duration = 500;
        goalCom = {x = 10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 15;
                maxVal = 30;
                jointPairs = [
                  {joint = lHipPitch; addValue = 0.3;},
                  {joint = rHipPitch; addValue = 0.3;}
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 0.5;},
            {joint = rHipPitch; factor = 0.5;},
            {joint = lKneePitch; factor = 0.8;},
            {joint = rKneePitch; factor = 0.8;}
          ];
          jointX = [
            {joint = lAnkleRoll; factor = 1;},
            {joint = rAnkleRoll; factor = 1;}
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 7, 0, -2.5, -90, 0];
        rightArm = [90, -7, 0, 2.5, 90, 0];
        leftLeg = [0, 0, -20.8, 48.2, -27.5, 0];
        rightLeg = [0, 0, -20.8, 48.2, -27.5, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 50; y = 70;};
    };
    balanceOut = true;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  recoverFast = {
    baseLimbStiffness = [0, 30, 30, 90, 90];
    lines = [
      {
        phase = ErrorPhase;
        duration = 400;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lHipPitch; s = 20;},
          {joint = rHipPitch; s = 20;}
        ];
        head = [0, 0];
        leftArm = [90, 90, 0, 0, -90, 0];
        rightArm = [90, -90, 0, 0, 90, 0];
        leftLeg = [0, 0, 20, 0, 0, 0];
        rightLeg = [0, 0, 20, 0, 0, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  recoverFromSideBack = {
    baseLimbStiffness = [0, 30, 20, 30, 30];
    lines = [
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 90, 0, 0, -90, 0];
        rightArm = [90, -90, -0, -0, 90, 0];
        leftLeg = [0, -0, 40, 0, 0, -0];
        rightLeg = [0, 0, 0, 0, 0, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  recoverFromSideFront = {
    baseLimbStiffness = [0, 30, 20, 30, 30];
    lines = [
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 90, 0, 0, -90, 0];
        rightArm = [90, -90, -0, -0, 90, 0];
        leftLeg = [0, -0, -30, 0, 0, -0];
        rightLeg = [0, 0, 0, 0, 0, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  recoverFromGenu = {
    baseLimbStiffness = [20, 60, 60, 90, 90];
    lines = [
      {
        phase = Split;
        duration = 250;
        goalCom = {x = -68; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [119.8, 7.8, -71.1, -31.4, -90, 0];
        rightArm = [121.6, -0.4, 87.5, 22.2, 90, 0];
        leftLeg = [-67.9, 18.6, -91, 75.5, 51.6, -4.8];
        rightLeg = [-67.9, -20.7, -91, 73, 52.2, 7.6];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = fromSplit;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  recoverFromSumo = {
    baseLimbStiffness = [20, 40, 40, 90, 90];
    lines = [
      {
        phase = BackSitUp;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [115, 0, 20, -20, 0, 0];
        rightArm = [115, 0, -20, 20, 0, 0];
        leftLeg = [-60, 30, -90, 87, 44, 4];
        rightLeg = [-60, -24, -89, 104, 33, 1];
      },
      {
        phase = Split;
        duration = 250;
        goalCom = {x = -68; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [119.8, 7.8, -71.1, -31.4, -90, 0];
        rightArm = [121.6, -0.4, 87.5, 22.2, 90, 0];
        leftLeg = [-67.9, 18.6, -91, 75.5, 51.6, -4.8];
        rightLeg = [-67.9, -20.7, -91, 73, 52.2, 7.6];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = fromSplit;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  recoverArmLeftFrontLyingOn = {
    baseLimbStiffness = [0, 40, 40, 50, 50];
    lines = [
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [63.5, 21.6, 0, -82.5, -27.6, 0];
        rightArm = [63.5, -21.6, 0, 82.5, 27.6, 0];
        leftLeg = [-30, -10, -14, 3.4, -66, 0];
        rightLeg = [-30, 10, -14, 3.4, -66, 0];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 10.1, -90, -8.2, -90, 0];
        rightArm = [90, -10.1, 90, 8.2, 90, 0];
        leftLeg = [-29, -13, -51, -1.7, -32, 5];
        rightLeg = [-29, 13, -51, -1.7, -32, -5];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [20000, 20000];
        leftArm = [90, 90, 0, 0, -90, 0];
        rightArm = [90, -90, 0, 0, 90, 0];
        leftLeg = [0, 0, 0, 0, 0, 0];
        rightLeg = [0, 0, 0, 0, 0, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  stand = {
    baseLimbStiffness = [40, 75, 75, 75, 75];
    lines = [
      {
        phase = Stand;
        duration = 2000;
        goalCom = {x = 10; y = 0;};
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 0.5;},
            {joint = rHipPitch; factor = 0.5;},
            {joint = lKneePitch; factor = 0.7;},
            {joint = rKneePitch; factor = 0.7;}
          ];
          jointX = [
            {joint = lAnkleRoll; factor = 1;},
            {joint = rAnkleRoll; factor = 1;}
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 7, 0, -2.5, -90, 0];
        rightArm = [90, -7, 0, 2.5, 90, 0];
        leftLeg = [0, 0, -20.8, 48.2, -27.5, 0];
        rightLeg = [0, 0, -20.8, 48.2, -27.5, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = true;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = true;
    interpolationType = SinusMinToMax;
  };
  sit = {
    baseLimbStiffness = [20, 50, 50, 50, 50];
    lines = [
      {
        phase = Sit;
        duration = 1000;
        goalCom = {x = 10; y = 0;};
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {joint = lAnklePitch; factor = 1;},
            {joint = rAnklePitch; factor = 1;},
            {joint = lHipPitch; factor = 0.5;},
            {joint = rHipPitch; factor = 0.5;},
            {joint = lKneePitch; factor = 0.2;},
            {joint = rKneePitch; factor = 0.2;}
          ];
          jointX = [
            {joint = lAnkleRoll; factor = 1;},
            {joint = rAnkleRoll; factor = 1;}
          ];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 10.1, -90, -8.2, -90, 0];
        rightArm = [90, -10.1, 90, 8.2, 90, 0];
        leftLeg = [0, 0, -50, 121.1, -67.8, 0];
        rightLeg = [0, 0, -50, 121.1, -67.8, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = stand;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = true;
    interpolationType = Linear;
  };
  calibrateHalfSplit = {
    baseLimbStiffness = [20, 30, 30, 60, 60];
    lines = [
      {
        phase = HalfSplit;
        duration = 2000;
        goalCom = {x = -15; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 30];
        leftArm = [120, 12, 5, -85, -30, 0];
        rightArm = [120, -12, -5, 85, 30, 0];
        leftLeg = [-10, 0, -45, 40, 57, 0];
        rightLeg = [-10, 0, -45, 40, 57, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  calibrateSplit = {
    baseLimbStiffness = [20, 30, 30, 60, 60];
    lines = [
      {
        phase = Split;
        duration = 2000;
        goalCom = {x = -10; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [90, 30, -50, 0, -90, 0];
        rightArm = [90, -30, 50, 0, 90, 0];
        leftLeg = [-40, 0, -60, 123, -41, 0];
        rightLeg = [-40, 0, -60, 123, -41, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  sitDown = {
    baseLimbStiffness = [50, 40, 40, 75, 75];
    lines = [
      {
        phase = Sit;
        duration = 1500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, -1];
        leftArm = [41, 9, 5, -3, -90, 0];
        rightArm = [41, -9, -5, 3, 90, 0];
        leftLeg = [0, 0, -50, 121, -68, 0];
        rightLeg = [0, 0, -50, 121, -68, 0];
      },
      {
        phase = Sit;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lHipRoll; s = 0;},
          {joint = lKneePitch; s = 0;},
          {joint = lAnklePitch; s = 0;},
          {joint = lAnkleRoll; s = 0;},
          {joint = rHipYawPitch; s = 0;},
          {joint = rHipRoll; s = 0;},
          {joint = rKneePitch; s = 0;},
          {joint = rAnklePitch; s = 0;},
          {joint = rAnkleRoll; s = 0;}
        ];
        head = [0, -1];
        leftArm = [51, 3, 15, -36, -90, 0];
        rightArm = [51, -3, -15, 36, 90, 0];
        leftLeg = [0, 0, -50, 121, -68, 0];
        rightLeg = [0, 0, -50, 121, -68, 0];
      },
      {
        phase = Sit;
        duration = 100;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = headYaw; s = 0;},
          {joint = headPitch; s = 0;},
          {joint = lShoulderPitch; s = 0;},
          {joint = lShoulderRoll; s = 0;},
          {joint = lElbowRoll; s = 0;},
          {joint = lElbowYaw; s = 0;},
          {joint = lWristYaw; s = 0;},
          {joint = lHand; s = 0;},
          {joint = rShoulderPitch; s = 0;},
          {joint = rShoulderRoll; s = 0;},
          {joint = rElbowRoll; s = 0;},
          {joint = rElbowYaw; s = 0;},
          {joint = rWristYaw; s = 0;},
          {joint = rHand; s = 0;}
        ];
        head = [0, -1];
        leftArm = [41, 9, 5, -3, -90, 0];
        rightArm = [41, -9, -5, 3, 90, 0];
        leftLeg = [0, 0, -50, 121, -68, 0];
        rightLeg = [0, 0, -50, 121, -68, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = true;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = SinusMinToMax;
  };
  sitDownKeeper = {
    baseLimbStiffness = [70, 60, 60, 60, 60];
    lines = [
      {
        phase = ErrorPhase;
        duration = 2000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lElbowRoll; s = 10;},
          {joint = lElbowYaw; s = 10;},
          {joint = lHand; s = 0;},
          {joint = rElbowRoll; s = 10;},
          {joint = rElbowYaw; s = 10;},
          {joint = rHand; s = 0;}
        ];
        head = [0, 1];
        leftArm = [44, 70, 12, -15, -90, 0];
        rightArm = [44, -70, -12, 15, 90, 0];
        leftLeg = [0, -2, -52, 121, -68, 2];
        rightLeg = [0, -1, -52, 121, -68, 1];
      },
      {
        phase = ErrorPhase;
        duration = 100;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lKneePitch; s = 0;},
          {joint = rKneePitch; s = 0;}
        ];
        head = [0, 1];
        leftArm = [44, 70, 12, -15, -90, 0];
        rightArm = [44, -70, -12, 15, 90, 0];
        leftLeg = [0, -2, -52, 121, -68, 2];
        rightLeg = [0, -1, -52, 121, -68, 1];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = true;
    energySavingArms = true;
    isMotionStable = true;
    interpolationType = SinusMinToMax;
  };
  keeperJumpLeft = {
    baseLimbStiffness = [50, 100, 100, 60, 60];
    lines = [
      {
        phase = ErrorPhase;
        duration = 130;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {variable = IsSitting; lowerFloat = -2000; higherFloat = 100; isNot = false;}
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 1];
        leftArm = [0, 3, 3, -7, -90, 0];
        rightArm = [90, -17, 0, 15, 90, 0];
        leftLeg = [0, 0, -48, 96, -48, 0];
        rightLeg = [0, 0, -48, 96, -48, 0];
      },
      {
        phase = ErrorPhase;
        duration = 400;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [-119, 3, 3, -7, -90, 0];
        rightArm = [90, -21, 0, 2, 90, 0];
        leftLeg = [14, 16, -71, 121, -67, 7];
        rightLeg = [14, 22, -34, 67, -33, 3];
      },
      {
        phase = ErrorPhase;
        duration = 100;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = headPitch; s = 0;},
          {joint = headYaw; s = 0;},
          {joint = lShoulderPitch; s = 0;},
          {joint = lShoulderRoll; s = 0;},
          {joint = lElbowRoll; s = 0;},
          {joint = lElbowYaw; s = 0;},
          {joint = lWristYaw; s = 0;},
          {joint = lHand; s = 0;},
          {joint = rShoulderPitch; s = 0;},
          {joint = rShoulderRoll; s = 0;},
          {joint = rElbowRoll; s = 0;},
          {joint = rElbowYaw; s = 0;},
          {joint = rWristYaw; s = 0;},
          {joint = rHand; s = 0;},
          {joint = lHipYawPitch; s = 0;},
          {joint = lHipRoll; s = 0;},
          {joint = lHipPitch; s = 0;},
          {joint = lKneePitch; s = 0;},
          {joint = lAnklePitch; s = 0;},
          {joint = lAnkleRoll; s = 0;},
          {joint = rHipYawPitch; s = 0;},
          {joint = rHipRoll; s = 0;},
          {joint = rHipPitch; s = 0;},
          {joint = rKneePitch; s = 0;},
          {joint = rAnklePitch; s = 0;},
          {joint = rAnkleRoll; s = 0;}
        ];
        head = [0, 0];
        leftArm = [-119, 3, 3, -7, -90, 0];
        rightArm = [90, -21, 0, 2, 90, 0];
        leftLeg = [14, 16, -71, 121, -67, 7];
        rightLeg = [14, 22, -34, 67, -33, 3];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lShoulderPitch; s = 40;},
          {joint = lShoulderRoll; s = 40;},
          {joint = lElbowRoll; s = 10;},
          {joint = lElbowYaw; s = 10;},
          {joint = rShoulderPitch; s = 50;},
          {joint = rShoulderRoll; s = 50;},
          {joint = rElbowRoll; s = 10;},
          {joint = rElbowYaw; s = 10;},
          {joint = lHipYawPitch; s = 60;},
          {joint = lHipRoll; s = 60;},
          {joint = lHipPitch; s = 60;},
          {joint = lKneePitch; s = 60;},
          {joint = lAnklePitch; s = 60;},
          {joint = lAnkleRoll; s = 60;},
          {joint = rHipYawPitch; s = 60;},
          {joint = rHipRoll; s = 60;},
          {joint = rHipPitch; s = 60;},
          {joint = rKneePitch; s = 60;},
          {joint = rAnklePitch; s = 60;},
          {joint = rAnkleRoll; s = 60;}
        ];
        head = [0, 0];
        leftArm = [-119, 3, 3, -7, -90, 0];
        rightArm = [100, 0, 7, 2, 90, 0];
        leftLeg = [2, -20, -60, 114, -35, 4];
        rightLeg = [2, -10, -3, 5, -31, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = headYaw; s = 0;},
          {joint = headPitch; s = 0;},
          {joint = lShoulderPitch; s = 0;},
          {joint = lShoulderRoll; s = 0;},
          {joint = lElbowYaw; s = 0;},
          {joint = lElbowRoll; s = 0;},
          {joint = lWristYaw; s = 0;},
          {joint = lHand; s = 0;},
          {joint = rShoulderPitch; s = 0;},
          {joint = rShoulderRoll; s = 0;},
          {joint = rElbowYaw; s = 0;},
          {joint = rElbowRoll; s = 0;},
          {joint = rWristYaw; s = 0;},
          {joint = rHand; s = 0;},
          {joint = lHipYawPitch; s = 0;},
          {joint = lHipRoll; s = 0;},
          {joint = lHipPitch; s = 0;},
          {joint = lKneePitch; s = 0;},
          {joint = lAnklePitch; s = 0;},
          {joint = lAnkleRoll; s = 0;},
          {joint = rHipYawPitch; s = 0;},
          {joint = rHipRoll; s = 0;},
          {joint = rHipPitch; s = 0;},
          {joint = rKneePitch; s = 0;},
          {joint = rAnklePitch; s = 0;},
          {joint = rAnkleRoll; s = 0;}
        ];
        head = [0, 0];
        leftArm = [-119, 3, 3, -7, -90, 0];
        rightArm = [100, 0, 7, 2, 90, 0];
        leftLeg = [2, -20, -60, 114, -35, 4];
        rightLeg = [2, -10, -3, 5, -31, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = Linear;
  };
  genuflectFromSitting = {
    baseLimbStiffness = [50, 30, 30, 75, 75];
    lines = [
      {
        phase = ErrorPhase;
        duration = 100;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 23];
        leftArm = [-7.9, 8.3, -1.1, -9.4, -90, 0];
        rightArm = [-5.4, -10.3, 16.9, 17, 90, 0];
        leftLeg = [0, 0, -58, 123, -69.4, 0];
        rightLeg = [0, 0, -57.7, 124, -69.6, 0];
      },
      {
        phase = ErrorPhase;
        duration = 100;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 23];
        leftArm = [-7.9, 8.3, -1.1, -9.4, -90, 0];
        rightArm = [-5.4, -10.3, 16.9, 17, 90, 0];
        leftLeg = [-63, 15.6, -35.6, 84.3, -13, 0];
        rightLeg = [-63, -27.9, -33.6, 88.4, -20.1, 9.7];
      },
      {
        phase = ErrorPhase;
        duration = 100;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 23];
        leftArm = [48.3, -17, 82.3, -29.7, -90, 0];
        rightArm = [41.8, 18.1, -73.3, 40.9, 90, 0];
        leftLeg = [-68, 18.6, -91.6, 75.5, 51.6, -4.8];
        rightLeg = [-68, -20.7, -91, 73, 52.2, 7.6];
      }
    ];
    odometryOffset = {
      rotation = 20.0535deg;
      translation = {x = -30; y = 200;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = true;
    interpolationType = Linear;
  };
  genuflectStand = {
    baseLimbStiffness = [50, 50, 50, 50, 50];
    lines = [
      {
        phase = ErrorPhase;
        duration = 48;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 4.5];
        leftArm = [97, 3, -25, -3.25, -90, 0];
        rightArm = [98, -3.3, 28.2, 3.25, 90, 0];
        leftLeg = [-19.2, 4.8, -25.4, 59.2, -23.2, 0];
        rightLeg = [-19.2, -8.6, -24.8, 60, -25.3, 3];
      },
      {
        phase = ErrorPhase;
        duration = 35;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = true;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [
          {
            variable = FootSupportVal;
            lowerFloat = -2000;
            higherFloat = -0.2;
            isNot = false;
            maxWaitTime = 200;
          }
        ];
        conditions = [
          {
            variable = FootSupportVal;
            lowerFloat = -0.2;
            higherFloat = 2000;
            isNot = false;
          }
        ];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 4.5];
        leftArm = [97, 3, -25, -3.25, -90, 0];
        rightArm = [98, -3.3, 28.2, 3.25, 90, 0];
        leftLeg = [-19.2, 0, -18.4, 48.6, -18.2, 0];
        rightLeg = [-19.2, -13, -33.4, 64.2, -31.8, 3];
      },
      {
        phase = ErrorPhase;
        duration = 152;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 15];
        leftArm = [113, -6, -83, -5, -90, 0];
        rightArm = [117, 5, 94, 5, 90, 0];
        leftLeg = [-64, 16, -36, 85, -13, 0];
        rightLeg = [-64, -28, -34, 89, -20, 10];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 23];
        leftArm = [120, -5, -85, -19, -90, 0];
        rightArm = [120, -1, 87, 23, 90, 0];
        leftLeg = [-65, 42, -81, 76, 51, -7];
        rightLeg = [-65, -33, -85, 82, 48, 1];
      }
    ];
    odometryOffset = {
      rotation = 20.0535deg;
      translation = {x = -30; y = 200;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = true;
    energySavingArms = true;
    isMotionStable = true;
    interpolationType = Linear;
  };
  genuflectStandDefender = {
    baseLimbStiffness = [50, 50, 50, 75, 75];
    lines = [
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 15];
        leftArm = [120, 34, 21, -2, -90, 0];
        rightArm = [120, -33, -16, 2, 90, 0];
        leftLeg = [-46, 27, -61, 109, -23, -21];
        rightLeg = [-46, -38, -69, 101, -6, 23];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 23];
        leftArm = [120, 33, 20, -2, -90, 0];
        rightArm = [120, -32, -16, 2, 90, 0];
        leftLeg = [-66, 43, -88, 118, 18, -17];
        rightLeg = [-66, -43, -88, 121, 13, 13];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 23];
        leftArm = [113, -4, 20, -9, -90, 0];
        rightArm = [116, 17, -43, 17, 90, 0];
        leftLeg = [-65, 28, -88, 96, 38, -8];
        rightLeg = [-65, -23, -86, 56, 53, 0];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 23];
        leftArm = [101, 11, 24, -4, -90, 0];
        rightArm = [94, -23, -11, 19, 90, 0];
        leftLeg = [-62, 45, -56, -4, 52, 1];
        rightLeg = [-62, -24, -88, 77, 50, 7];
      }
    ];
    odometryOffset = {
      rotation = 20.0535deg;
      translation = {x = -30; y = 200;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = false;
    energySavingArms = false;
    isMotionStable = true;
    interpolationType = Linear;
  };
  demoBannerWave = {
    baseLimbStiffness = [50, 70, 70, 70, 70];
    lines = [
      {
        phase = ErrorPhase;
        duration = 2500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lAnklePitch; s = 60;},
          {joint = rAnklePitch; s = 60;}
        ];
        head = [20, 0];
        leftArm = [-20, -5, 0, -40, -80, 0];
        rightArm = [-20, -45, 0, 2, 80, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 2500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-20, 0];
        leftArm = [-55, 45, 0, -2, 0, 0];
        rightArm = [-20, 5, 0, 40, 80, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 2500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [20, 0];
        leftArm = [-20, -5, 0, -40, -80, 0];
        rightArm = [-55, -45, 0, 2, 80, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 2500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-20, 0];
        leftArm = [-55, 45, 0, -2, 0, 0];
        rightArm = [-20, 5, 0, 40, 80, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 2500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [20, 0];
        leftArm = [-20, -5, 0, -40, -80, 0];
        rightArm = [-55, -45, 0, 2, 80, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 2500;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-20, 0];
        leftArm = [-55, 45, 0, -2, 0, 0];
        rightArm = [-20, 5, 0, 40, 80, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 2000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lElbowRoll; s = 30;},
          {joint = rElbowRoll; s = 30;}
        ];
        head = [0, 0];
        leftArm = [-55, 40, 0, -20, -80, 0];
        rightArm = [-20, -60, 0, 20, 80, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [20, 0];
        leftArm = [0, 90, -80, -80, 0, 0];
        rightArm = [0, -90, 80, 80, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-20, 0];
        leftArm = [0, 90, -80, -40, 0, 0];
        rightArm = [0, -90, 80, 40, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [20, 0];
        leftArm = [0, 90, -80, -80, 0, 0];
        rightArm = [0, -90, 80, 80, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [-20, 0];
        leftArm = [0, 90, -80, -40, 0, 0];
        rightArm = [0, -90, 80, 40, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [20, 0];
        leftArm = [0, 90, -80, -80, 0, 0];
        rightArm = [0, -90, 80, 80, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [0, 0];
        leftArm = [0, 90, -80, -40, 0, 0];
        rightArm = [0, -90, 80, 40, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      },
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [20, -25];
        leftArm = [0, 90, -80, -80, 0, 0];
        rightArm = [0, -90, 80, 80, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = true;
    energySavingArms = false;
    isMotionStable = false;
    interpolationType = SinusMinToMax;
  };
  demoBannerWaveInitial = {
    baseLimbStiffness = [50, 40, 40, 40, 40];
    lines = [
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {x = 0; y = 0;};
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        interpolationType = Default;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {jointY = []; jointX = [];};
        balancerActive = false;
        singleMotorStiffnessChange = [
          {joint = lAnklePitch; s = 60;},
          {joint = rAnklePitch; s = 60;}
        ];
        head = [0, -10];
        leftArm = [0, 76, -80, -40, 0, 0];
        rightArm = [0, -76, 80, 40, 0, 0];
        leftLeg = [0, 0, -3, 0, 0, 0];
        rightLeg = [0, 0, -3, 0, 0, 0];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {x = 0; y = 0;};
    };
    balanceOut = false;
    continueTo = decideAutomatic;
    clipAngle = 0deg;
    energySavingLegs = true;
    energySavingArms = true;
    isMotionStable = false;
    interpolationType = Linear;
  };
};
brokenJointData = {
  headYaw = 50;
  headPitch = 50;
  lShoulderPitch = 20;
  lShoulderRoll = 20;
  lElbowYaw = 20;
  lElbowRoll = 20;
  lWristYaw = 200;
  lHand = 20;
  rShoulderPitch = 20;
  rShoulderRoll = 20;
  rElbowYaw = 20;
  rElbowRoll = 20;
  rWristYaw = 200;
  rHand = 20;
  lHipYawPitch = 20;
  lHipRoll = 20;
  lHipPitch = 30;
  lKneePitch = 20;
  lAnklePitch = 20;
  lAnkleRoll = 20;
  rHipYawPitch = 20;
  rHipRoll = 20;
  rHipPitch = 30;
  rKneePitch = 20;
  rAnklePitch = 20;
  rAnkleRoll = 20;
};
minJointCompensationReduceAngleDiff = 0.5deg;
jointCompensationSimulationFactor = 0.3;
clipBreakUpAngle = [ErrorPhase, ArmPushing, PushingWithArmsFromGround];
balanceOutParams = {
  maxTime = 1500;
  minFluctuation = 33deg;
  minForwardAngle = 7deg;
  minBackwardAngle = -2deg;
  minPIDDValue = 60;
};
supportPolygonOffsets = {x = 70; y = -40; z = 40;};
safeFallParameters = {
  sitHYPThreshold = 10deg;
  head = 25deg;
  headStiffness = 50;
  bodyStiffness = 10;
  lowHeadStiffnessWaitTime = 30;
  unstiffWaitTime = 2000;
};
