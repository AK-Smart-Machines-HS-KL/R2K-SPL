/**
 * @file DribbleEngine.h
 *
 * This file declares a module that provides a dribble generator.
 *
 * @author Philip Reichenberg
 * @author Arne Hasselbring
 */

#pragma once

#include "Representations/Configuration/BallSpecification.h"
#include "Representations/Configuration/KickInfo.h"
#include "Representations/Configuration/RobotDimensions.h"
#include "Representations/MotionControl/DribbleGenerator.h"
#include "Representations/MotionControl/MotionInfo.h"
#include "Representations/MotionControl/OdometryData.h"
#include "Representations/MotionControl/WalkGenerator.h"
#include "Representations/MotionControl/WalkingEngineOutput.h"
#include "Representations/MotionControl/WalkKickGenerator.h"
#include "Representations/MotionControl/WalkToBallGenerator.h"
#include "Representations/Sensing/RobotModel.h"
#include "Representations/Sensing/TorsoMatrix.h"
#include "Tools/Module/Module.h"

MODULE(DribbleEngine,
{,
  REQUIRES(BallSpecification),
  USES(MotionInfo),
  USES(OdometryData),
  REQUIRES(KickInfo),
  REQUIRES(RobotDimensions),
  REQUIRES(RobotModel),
  REQUIRES(TorsoMatrix),
  REQUIRES(WalkGenerator),
  REQUIRES(WalkingEngineOutput),
  REQUIRES(WalkKickGenerator),
  REQUIRES(WalkToBallGenerator),
  PROVIDES(DribbleGenerator),
  DEFINES_PARAMETERS(
  {,
    (Angle)(3_deg) redecideSignThreshold, /**< The dribble foot is only redecided if the decision angle is larger than this. */
    (Rangef)(Rangef(500.f, 750.f)) kickRange,

    (float)(0.8f) minBallDistanceForVelocity, /**< Subtract this much time to reach the ball, when propagating the ball position. */
  }),
});

class DribbleEngine : public DribbleEngineBase
{
  void update(DribbleGenerator& dribbleGenerator) override;

  /**
   * Calculates the pose where the robot should walk to be able to dribble the ball with one step.
   * @param ballInSCS The ball position relative to the new support foot frame.
   * @param directionInSCS The direction relative to the new support foot frame to which the ball should be dribbled.
   * @param sign The foot sign with which to dribble.
   * @param kickPower interpolation factor for the kick range.
   * @return The pose from which the ball can be dribbled with one step.
   */
  Pose2f calcBasePose(const Vector2f& ballInSCS, Angle directionInSCS, float& sign, const bool turnKickAllowed) const;

  float calcKickPower(const KickInfo::KickType kickType, const Angle directionInSCS, const float kickPower, const bool turnKickAllowed);

  float lastSign = 1.f; /**< The foot sign of the last phase generated by this engine. */
};
