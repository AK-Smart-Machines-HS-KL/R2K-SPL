// Code generated by bitproto. DO NOT EDIT.

#ifndef __BITPROTO__VECTOR_H__
#define __BITPROTO__VECTOR_H__ 1

#include <inttypes.h>
#include <stddef.h>
#include <stdint.h>
#ifndef __cplusplus
#include <stdbool.h>
#endif

#include "bitproto.h"

#if defined(__cplusplus)
extern "C" {
#endif

// Number of bytes to encode struct Vector2
#define BYTES_LENGTH_VECTOR2 4

struct Vector2 {
    int16_t x; // 14bit
    int16_t y; // 14bit
};

// Number of bytes to encode struct Angle
#define BYTES_LENGTH_ANGLE 2

struct Angle {
    int16_t milli_radians; // 12bit
};

// Number of bytes to encode struct Pose2
#define BYTES_LENGTH_POSE2 5

struct Pose2 {
    struct Vector2 translation; // 28bit
    struct Angle rotation; // 12bit
};

// Encode struct Vector2 to given buffer s.
int EncodeVector2(struct Vector2 *m, unsigned char *s);
// Decode struct Vector2 from given buffer s.
int DecodeVector2(struct Vector2 *m, unsigned char *s);
// Format struct Vector2 to a json format string.
int JsonVector2(struct Vector2 *m, char *s);

// Encode struct Angle to given buffer s.
int EncodeAngle(struct Angle *m, unsigned char *s);
// Decode struct Angle from given buffer s.
int DecodeAngle(struct Angle *m, unsigned char *s);
// Format struct Angle to a json format string.
int JsonAngle(struct Angle *m, char *s);

// Encode struct Pose2 to given buffer s.
int EncodePose2(struct Pose2 *m, unsigned char *s);
// Decode struct Pose2 from given buffer s.
int DecodePose2(struct Pose2 *m, unsigned char *s);
// Format struct Pose2 to a json format string.
int JsonPose2(struct Pose2 *m, char *s);

void BpXXXProcessVector2(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatVector2(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessAngle(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatAngle(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPose2(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPose2(void *data, struct BpJsonFormatContext *ctx);

#if defined(__cplusplus)
}
#endif

#endif